# Generated by Django 5.0.1 on 2025-08-26 14:32

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0022_alter_cumulativerecord_student'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LearningTrack',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('order', models.PositiveIntegerField(default=0)),
                ('estimated_duration', models.PositiveIntegerField(default=5, help_text='Estimated time in minutes to complete.')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='AIInteractionLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task_type', models.CharField(choices=[('CONTENT_DRAFTING', 'Lesson Content Generation'), ('QUIZ_GENERATION', 'Quiz Question Generation'), ('STUDENT_GUIDANCE', 'Personalized Student Feedback')], max_length=20)),
                ('prompt_tokens', models.PositiveIntegerField(default=0)),
                ('response_tokens', models.PositiveIntegerField(default=0)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(editable=False, help_text='URL-friendly identifier. Auto-generated from title.', max_length=275, unique=True)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('PUBLISHED', 'Published'), ('ARCHIVED', 'Archived')], db_index=True, default='DRAFT', max_length=10)),
                ('learning_objectives', models.TextField(blank=True, help_text='What new skills or knowledge will students gain? (List key points)')),
                ('prerequisites', models.TextField(blank=True, help_text='What knowledge should students have before starting this course?')),
                ('course_type', models.CharField(choices=[('INTERNAL', 'Internal Class Course'), ('EXTERNAL', 'Online Academy Course')], default='INTERNAL', max_length=10)),
                ('is_subscription_based', models.BooleanField(default=False, help_text='For EXTERNAL courses: requires a paid subscription.')),
                ('grading_weights', models.JSONField(blank=True, help_text="Define grade weights, e.g., {'assignments': 40, 'assessments': 30, 'final_exam': 30}", null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('linked_class', models.ForeignKey(blank=True, help_text='For INTERNAL courses: links to the primary school class.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.class')),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='lsalms_courses', to=settings.AUTH_USER_MODEL)),
                ('term', models.ForeignKey(blank=True, help_text='For INTERNAL courses: links to the academic term.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.term')),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='CourseEnrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrolled_at', models.DateTimeField(auto_now_add=True)),
                ('subscription_end_date', models.DateField(blank=True, help_text='For subscription-based courses.', null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='lsalms.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lsalms_enrollments', to='core.student')),
            ],
        ),
        migrations.CreateModel(
            name='CourseGrade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('final_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('grade_details_json', models.JSONField(blank=True, help_text='Snapshot of grade components.', null=True)),
                ('last_calculated', models.DateTimeField(auto_now=True)),
                ('enrollment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='grade_report', to='lsalms.courseenrollment')),
            ],
        ),
        migrations.CreateModel(
            name='LessonProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed_at', models.DateTimeField(auto_now_add=True)),
                ('enrollment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lesson_progress', to='lsalms.courseenrollment')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsalms.lesson')),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, help_text="A brief overview of this module's goals.")),
                ('order', models.PositiveIntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='lsalms.course')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='lesson',
            name='module',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='lsalms.module'),
        ),
        migrations.CreateModel(
            name='PracticeQuiz',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PracticeQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_text', models.TextField()),
                ('options_json', models.JSONField(help_text="List of choices, e.g., ['A', 'B', 'C']")),
                ('correct_option', models.CharField(max_length=255)),
                ('explanation', models.TextField(blank=True, help_text='Feedback shown after the student answers.')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='lsalms.practicequiz')),
            ],
        ),
        migrations.CreateModel(
            name='ContentBlock',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text="e.g., 'Video: Introduction to Photosynthesis'", max_length=255)),
                ('content_type', models.CharField(choices=[('TEXT', 'Rich Text'), ('IMAGE', 'Image'), ('VIDEO', 'Video Embed'), ('AUDIO', 'Audio Clip'), ('FILE', 'File Download'), ('PRACTICE_QUIZ', 'Practice Quiz (Ungraded)'), ('ASSIGNMENT', 'Link to Graded Assignment'), ('ASSESSMENT', 'Link to Graded Assessment'), ('EXAM', 'Link to Graded Exam')], max_length=15)),
                ('order', models.PositiveIntegerField(default=0)),
                ('rich_text', models.TextField(blank=True, help_text='For TEXT content type.')),
                ('media_url', models.URLField(blank=True, help_text='URL for Video or external Audio/Image.')),
                ('media_file', models.FileField(blank=True, null=True, upload_to='lsalms/media/%Y/%m/')),
                ('linked_assessment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.assessment')),
                ('linked_assignment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.assignment')),
                ('linked_exam', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.exam')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='content_blocks', to='lsalms.lesson')),
                ('linked_practice_quiz', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lsalms.practicequiz')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SpacedRepetitionItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('next_review_date', models.DateField(db_index=True)),
                ('current_interval', models.PositiveIntegerField(default=1, help_text='Review interval in days.')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsalms.lesson')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_schedule', to='core.student')),
            ],
        ),
        migrations.CreateModel(
            name='StudentActivityLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_type', models.CharField(choices=[('COURSE_ENROLLED', 'Course Enrolled'), ('LESSON_VIEWED', 'Lesson Viewed'), ('PRACTICE_QUIZ_ATTEMPTED', 'Practice Quiz Attempted'), ('VIDEO_PLAYED_TO_END', 'Video Completed')], db_index=True, max_length=30)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('object_id', models.PositiveIntegerField()),
                ('details_json', models.JSONField(blank=True, help_text="e.g., {'score': 80, 'time_spent_sec': 120}", null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lsalms_activity_logs', to='core.student')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='TrackCourseOrder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(default=0)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsalms.course')),
                ('track', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='lsalms.learningtrack')),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='learningtrack',
            name='courses',
            field=models.ManyToManyField(related_name='learning_tracks', through='lsalms.TrackCourseOrder', to='lsalms.course'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(condition=models.Q(('course_type', 'INTERNAL')), fields=('linked_class', 'term'), name='unique_internal_course_per_class_term'),
        ),
        migrations.AlterUniqueTogether(
            name='courseenrollment',
            unique_together={('student', 'course')},
        ),
        migrations.AlterUniqueTogether(
            name='lessonprogress',
            unique_together={('enrollment', 'lesson')},
        ),
        migrations.AlterUniqueTogether(
            name='module',
            unique_together={('course', 'title')},
        ),
        migrations.AlterUniqueTogether(
            name='spacedrepetitionitem',
            unique_together={('student', 'lesson')},
        ),
        migrations.AlterUniqueTogether(
            name='trackcourseorder',
            unique_together={('track', 'course')},
        ),
    ]
